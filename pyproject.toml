[tool.poetry]
name = "dk_tools"
version = "0.1.0"
description = "Dave Kujawski custom tools for Blender"
authors = ["Dave Kujawski <dave.kujawski@gmail.com>"]
readme = "README.md"
packages = [{ include = "source" }]

[tool.poetry.dependencies]
python = "^3.11"


[tool.poetry.group.dev.dependencies]
ruff = "^0.8.4"
fake-bpy-module = "^20241230"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4

target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = [
    # Info: Use `isinstance()` instead of comparing types directly.
    # Why disable? Changes code logic, in rare cases we want to compare exact types.
    "E721",
    # Info: Fix bare except.
    # Why disable? Disruptive, leave our exceptions alone.
    "E722",
    # Info: Fix module level import not at top of file.
    # Why disable? Re-ordering imports is disruptive and breaks some scripts
    # that need to check if a module has already been loaded in the case of reloading.
    "E402",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pyright]
reportInvalidTypeForm = false
